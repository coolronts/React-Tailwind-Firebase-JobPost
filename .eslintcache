[{"E:\\code\\React\\React-Tailwind-Firebase-JobPost\\src\\index.js":"1","E:\\code\\React\\React-Tailwind-Firebase-JobPost\\src\\App.js":"2","E:\\code\\React\\React-Tailwind-Firebase-JobPost\\src\\firebase.js":"3","E:\\code\\React\\React-Tailwind-Firebase-JobPost\\src\\Pages\\SignUp.js":"4","E:\\code\\React\\React-Tailwind-Firebase-JobPost\\src\\Pages\\Lists.js":"5","E:\\code\\React\\React-Tailwind-Firebase-JobPost\\src\\Pages\\LogIn.js":"6","E:\\code\\React\\React-Tailwind-Firebase-JobPost\\src\\Pages\\ForgotPassword.js":"7","E:\\code\\React\\React-Tailwind-Firebase-JobPost\\src\\Pages\\JobPage.js":"8","E:\\code\\React\\React-Tailwind-Firebase-JobPost\\src\\contexts\\AuthContext.js":"9","E:\\code\\React\\React-Tailwind-Firebase-JobPost\\src\\Pages\\UI\\TextInput.js":"10","E:\\code\\React\\React-Tailwind-Firebase-JobPost\\src\\Pages\\UI\\Checkbox.js":"11","E:\\code\\React\\React-Tailwind-Firebase-JobPost\\src\\Pages\\components\\Navbar.js":"12","E:\\code\\React\\React-Tailwind-Firebase-JobPost\\src\\Pages\\Modal.jsx":"13","E:\\code\\React\\React-Tailwind-Firebase-JobPost\\src\\Pages\\ModalAdd.jsx":"14"},{"size":220,"mtime":1611147037245,"results":"15","hashOfConfig":"16"},{"size":1046,"mtime":1613096831661,"results":"17","hashOfConfig":"16"},{"size":586,"mtime":1613096847817,"results":"18","hashOfConfig":"16"},{"size":4669,"mtime":1613028361862,"results":"19","hashOfConfig":"16"},{"size":4397,"mtime":1613083497993,"results":"20","hashOfConfig":"16"},{"size":4159,"mtime":1613024917755,"results":"21","hashOfConfig":"16"},{"size":3504,"mtime":1612169962252,"results":"22","hashOfConfig":"16"},{"size":9788,"mtime":1613046098985,"results":"23","hashOfConfig":"16"},{"size":5959,"mtime":1613036835525,"results":"24","hashOfConfig":"16"},{"size":743,"mtime":1613019553559,"results":"25","hashOfConfig":"16"},{"size":779,"mtime":1613020447457,"results":"26","hashOfConfig":"16"},{"size":2376,"mtime":1613083351396,"results":"27","hashOfConfig":"16"},{"size":3117,"mtime":1612773031849,"results":"28","hashOfConfig":"16"},{"size":7288,"mtime":1613037436005,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1d8gtds",{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"39"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"39"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"39"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"39"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"39"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"39"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"39"},"E:\\code\\React\\React-Tailwind-Firebase-JobPost\\src\\index.js",[],"E:\\code\\React\\React-Tailwind-Firebase-JobPost\\src\\App.js",["67"],"E:\\code\\React\\React-Tailwind-Firebase-JobPost\\src\\firebase.js",[],"E:\\code\\React\\React-Tailwind-Firebase-JobPost\\src\\Pages\\SignUp.js",["68","69","70"],"import React, { useState, useRef } from 'react';\r\nimport { Formik, Form, useField } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport TextInput from '../Pages/UI/TextInput'\r\nimport Checkbox from '../Pages/UI/Checkbox'\r\n\r\nconst classes = {\r\n    body: 'bg-grey-lighter h-screen font-sans',\r\n    mainContent: 'container mx-auto h-full flex justify-center items-center',\r\n    content: 'w-1/3',\r\n    heading: 'font-medium mb-6 text-center text-4xl',\r\n    card: 'border-3 border-green-300 py-6 px-8 bg-white m-1 rounded-lg shadow-lg',\r\n    label: 'font-bold text-grey-darker block mb-2',\r\n    input: 'block w-full bg-white border border-grey-light hover:border-green-300 px-2 py-2 rounded shadow',\r\n    buttonArea: 'flex justify-center mt-6',\r\n    button: 'bg-green-500 hover:bg-green-800 text-white font-bold py-2 px-4 rounded w-24',\r\n    hasAccountArea: 'flex justify-center',\r\n    hasAccount: 'text-xs font-bold mt-4',\r\n    link: 'text-blue-600',\r\n    \r\n}\r\n \r\nconst SignUp = () => {\r\n      \r\n    const [error, setError] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n    const { signUp, currentUser } = useAuth();\r\n    const history = useHistory()\r\n    return (\r\n        <>\r\n            <Formik\r\n                initialValues={{\r\n                email: '',\r\n                password: '',\r\n                acceptedTerms:false,\r\n                }}\r\n                validationSchema={Yup.object({\r\n                email: Yup.string()\r\n                    .email('Invalid email address')\r\n                    .required('Required'),\r\n                password: Yup.string()\r\n                    .min(6, 'Must be 6 characters or more')\r\n                    .required('Required'),\r\n                confirmPassword: Yup.string()\r\n                    .max(20, 'Must match')\r\n                    .required('Required')\r\n                    .oneOf([Yup.ref('password'), null], 'Passwords must match'),\r\n                acceptedTerms: Yup.boolean()\r\n                    .required('Required')\r\n                    .oneOf([true], 'You must accept the terms and conditions.'),\r\n                })}\r\n                onSubmit={(values, { setSubmitting }) => {\r\n                    try {\r\n                        setError('');\r\n                        setLoading(true);\r\n                        signUp(values.email, values.password);\r\n                        history.push(\"/\");\r\n                    } catch {\r\n                        setError('Failed to sign up');\r\n                        setLoading(false);\r\n                    }\r\n                    setSubmitting(false)\r\n                }}\r\n            >\r\n                \r\n            <div className = { classes.body }>\r\n                <div className = { classes.mainContent }>\r\n                <div className = { classes.content }>\r\n                    <div className = { classes.card }>\r\n                    <h1 className={classes.heading}> Sign Up </h1>\r\n                    <label> {error && < div className = { classes.error } > { error } </div>} </label >\r\n                    <Form>\r\n                    <TextInput\r\n                        label=\"Email\"\r\n                        name=\"email\"\r\n                        type=\"text\"\r\n                        placeholder=\"Email\"\r\n                    />   \r\n                    \r\n                    <TextInput\r\n                        label=\"Password\"\r\n                        name=\"password\"\r\n                        type=\"password\"\r\n                        placeholder=\"Password\"\r\n                    />   \r\n                    \r\n                    <TextInput\r\n                        label=\"Confirm Password\"\r\n                        name=\"confirmPassword\"\r\n                        type=\"password\"\r\n                        placeholder=\"Confirm Password\"\r\n                    />   \r\n                    \r\n                    <Checkbox name=\"acceptedTerms\"> I accept the terms and conditions</Checkbox>\r\n\r\n                    <div className = { classes.buttonArea } >\r\n                        <button disabled={loading} type=\"submit\" className={classes.button}> Sign Up </button>\r\n                        </div>\r\n                        </Form>\r\n                    </div >\r\n                    <div className={classes.hasAccountArea} >\r\n                        <div className={classes.hasAccount} > Already Have an Account ? <Link className={classes.link} to = \"/LogIn\"> Log In </Link> </div>\r\n                    </div>\r\n                </div >\r\n                </div>\r\n            </div>\r\n        </Formik>\r\n    </>\r\n    )\r\n}\r\n\r\nexport default SignUp",["71","72"],"E:\\code\\React\\React-Tailwind-Firebase-JobPost\\src\\Pages\\Lists.js",["73","74"],"import { React, useState, useEffect } from 'react';\r\nimport Modal from \"./Modal\"\r\nimport Navbar from './components/Navbar';\r\nimport ModalAdd from './ModalAdd'\r\nimport { Link } from 'react-router-dom';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport { RiEditFill, RiDeleteBin7Line } from 'react-icons/ri';\r\n\r\n//Day.js\r\nvar dayjs = require('dayjs')\r\nvar relativeTime = require('dayjs/plugin/relativeTime')\r\ndayjs.extend(relativeTime)\r\n\r\nconst classes = {\r\n  Body: 'bg-gray-200 py-16 flex flex-row  ',\r\n  firstCol:'w-1/3',\r\n  list: ' w-full shadow-lg bg-white mb-10 grid grid-cols-8 p-2 border-l-4 border-green-400',\r\n  image: 'flex-shrink w-20 h-20',\r\n  details: 'ml-6 text-lg flex flex-col mx-2 col-start-2 col-span-4',\r\n  firstLine: 'flex items-center text-sm text-green-300 font-bold',\r\n  featured: 'mx-0 py-0 px-1 border-0 bg-gray-600 p-1 text-white rounded-lg h-4 w-12 flex items-center justify-center',\r\n  highlight: 'text-2xl text-left font-bold my-3 ',\r\n  tags: ' flex flex-wrap flex-grow col-span-2',\r\n  tag:'px-1 m-1 text-center bg-green-100 h-4 text-green-700 font-bold rounded text-xs',\r\n  infoArea: 'flex justify-between',\r\n  info: 'font-medium mr-3',\r\n  btn: 'mx-2 w-10 z-10',\r\n  buttons: 'mt-2  flex my-2  col-span-1',\r\n  addBtn: 'mb-4 p-3 z-10 bg-green-600 shadow-lg text-white ',\r\n  smallTags:'ml-2 mr-1 py-0 px-1 border-0 bg-green-300 p-1 text-white text-xs rounded-lg h-4 w-9 flex items-center justify-center'\r\n \r\n}\r\n\r\nconst Lists = (props) => {\r\n\r\n  const { jobs, fetchData, isDelete, Delete, isAdd, AddJob, currentUser } = useAuth()\r\n  const [id, setId] = useState()\r\n  var now = dayjs()\r\n\r\n  useEffect(() => {\r\n    if (props.match.path === \"/DashBoard\") {\r\n      fetchData(props.match.path)\r\n    } else {\r\n      fetchData(props.match.path)\r\n    }\r\n  },[props.match.path])\r\n\r\n  function handleDelete(e, docId) {\r\n    e.preventDefault()\r\n    setId(docId)\r\n    Delete()\r\n  }\r\n  \r\n  function handleAddJob(e){\r\n   AddJob() \r\n  }\r\n  \r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <div className={classes.Body}>\r\n        <div className={classes.firstCol}/> \r\n          <div class=\"text-center\">\r\n            {(isAdd && currentUser && props.match.path === \"/DashBoard\") && <ModalAdd />}\r\n            {(currentUser && !isAdd && props.match.path === \"/DashBoard\") &&\r\n              <div class=\"text-center\">\r\n              <button className={classes.addBtn} onClick={handleAddJob}>Add New Job Post</button>  \r\n              </div>\r\n            }\r\n          \r\n            { !isAdd && jobs.map((job) =>\r\n              <Link to={`/JobPage/${job.docId}`}>\r\n                <div className={classes.list}>\r\n                  <div className=\"\">\r\n                  <img className={classes.image} alt=\"Logo\" src={job.logo }/>        </div>      \r\n                  <div className={classes.details}>\r\n                    <div className={classes.firstLine}>{job.company}\r\n                        {now.diff(job.time, 'week') < 1 && <div className={classes.smallTags}>New</div> } {job.featured&& <div className={classes.smallTags}>Featured</div> } \r\n                    </div>\r\n                    <div className={classes.highlight}>  {job.title} </div>\r\n                    <div className={classes.infoArea}>\r\n                      <div className={classes.info} style={{ fontSize: \"10px\"}}> {dayjs(job.time).fromNow() } </div> \r\n                      <div className={classes.info} style={{ fontSize: \"10px\" }}> {job.type} </div> \r\n                      <div className={classes.info} style={{ fontSize: \"10px\"}}> {job.location} </div> \r\n                    </div>\r\n                  \r\n                  </div>\r\n                  <div className={classes.tags}> {job.tags.map((tag) =><div className={classes.tag}> {tag} </div>)}</div>\r\n                  {(currentUser && props.match.path === \"/DashBoard\") &&\r\n                    <div className={classes.buttons}>\r\n                      <RiEditFill class=\"text-green-500 text-xl\" > Edit </RiEditFill> \r\n                      <RiDeleteBin7Line class=\"text-red-500 text-xl mx-2\" onClick={(e)=>{handleDelete(e,job.docId)}} />          \r\n                    </div>\r\n                  }\r\n                  {isDelete && <Modal id={job.docId} />}  \r\n                </div>\r\n            </Link>    \r\n            )}\r\n          </div>\r\n          <div className={classes.firstCol}/>\r\n        </div>    \r\n      </> \r\n    )\r\n  }\r\n\r\nexport default Lists\r\n","E:\\code\\React\\React-Tailwind-Firebase-JobPost\\src\\Pages\\LogIn.js",["75","76"],"import React, { useState, useRef } from 'react';\r\nimport { Formik, Form, useField } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport TextInput from './UI/TextInput'\r\n\r\nconst classes = {\r\n    body: 'bg-grey-lighter h-screen font-sans',\r\n    mainContent: 'container mx-auto h-full flex justify-center items-center',\r\n    content: 'w-1/3',\r\n    heading: 'font-medium mb-6 text-center text-4xl',\r\n    card: 'border-3 border-green-300 py-6 px-8 bg-white m-1 rounded-lg shadow-lg',\r\n    buttonArea: 'flex justify-center mt-6',\r\n    button: 'bg-green-500 hover:bg-green-800 text-white font-bold py-2 px-4 rounded w-24',\r\n    hasAccountArea: 'flex justify-center',\r\n    hasAccount: 'text-xs font-bold mt-4',\r\n    link: 'text-blue-600',\r\n    forgotPasswordArea: 'text-center',\r\n    forgotPassword:'text-sm font-bold text-blue-500'\r\n    \r\n}\r\n\r\nconst LogIn = () => {\r\n      \r\n    const [error, setError] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n    const { logIn} = useAuth();\r\n    const history = useHistory()\r\n    return (\r\n        <>\r\n            <Formik\r\n                initialValues={{\r\n                email: '',\r\n                password: '',\r\n                acceptedTerms:false,\r\n                }}\r\n                validationSchema={Yup.object({\r\n                email: Yup.string()\r\n                    .email('Invalid email address')\r\n                    .required('Required'),\r\n                password: Yup.string()\r\n                    .min(6, 'Must be 6 characters or more')\r\n                    .required('Required'),\r\n                })}\r\n                onSubmit={(values, { setSubmitting }) =>  {\r\n                    setError('');\r\n                    setLoading(true);\r\n                    logIn(values.email, values.password)\r\n                        .then((userCredential) => {\r\n                            setSubmitting(false)\r\n                            setLoading(false)\r\n                            history.push('/')\r\n                        })\r\n                        .catch((error) => {\r\n                            setError(error.message)\r\n                            setLoading(false)\r\n                            setSubmitting(false)\r\n                        });\r\n                    }\r\n                }\r\n            >\r\n            <div className = { classes.body }>\r\n                <div className = { classes.mainContent }>\r\n                <div className = { classes.content }>\r\n                    <div className = { classes.card }>\r\n                    <h1 className={classes.heading}> LogIn </h1>\r\n                    <label> {error && < div className = { classes.error } > { error } </div>} </label >\r\n                    <Form>\r\n                    <TextInput\r\n                        label=\"Email\"\r\n                        name=\"email\"\r\n                        type=\"text\"\r\n                        placeholder=\"Email\"\r\n                    />   \r\n                    \r\n                    <TextInput\r\n                        label=\"Password\"\r\n                        name=\"password\"\r\n                        type=\"password\"\r\n                        placeholder=\"Password\"\r\n                    />                                    \r\n                    \r\n                    <div className = { classes.buttonArea } >\r\n                        <button disabled={loading}  type=\"submit\" className={classes.button}> LogIn </button>\r\n                    </div>\r\n                </Form>\r\n                <div className = { classes.forgotPasswordArea } >\r\n                    <Link className = { classes.forgotPassword } to = \"/ForgotPassword\" > Forgot Password. Click Here </Link> </div>\r\n                    </div >\r\n                    <div className={classes.hasAccountArea} >\r\n                        <div className={classes.hasAccount} > Already Have an Account ? <Link className={classes.link} to = \"/LogIn\"> Log In </Link> </div>\r\n                    </div>\r\n                </div >\r\n                </div>\r\n            </div>\r\n        </Formik>\r\n    </>\r\n    )\r\n}\r\n\r\nexport default LogIn","E:\\code\\React\\React-Tailwind-Firebase-JobPost\\src\\Pages\\ForgotPassword.js",["77"],"import React, { useState, useRef } from 'react';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport \"firebase/auth\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\nconst classes = {\r\n    body: 'bg-grey-lighter h-screen font-sans',\r\n    mainContent: 'container mx-auto h-full flex justify-center items-center',\r\n    content: 'w-1/3',\r\n    heading: 'font-medium mb-6 text-center text-4xl',\r\n    card: 'border-3 border-green-300 py-6 px-8 bg-white m-1 rounded-lg shadow-lg',\r\n    label: 'font-bold text-grey-darker block mb-2',\r\n    input: 'block w-full bg-white border border-grey-light hover:border-green-300 px-2 py-2 rounded shadow',\r\n    buttonArea:'flex justify-center mt-2',\r\n    button: 'bg-green-500 hover:bg-green-800 text-white font-bold py-2 px-4 rounded ',\r\n    hasAccountArea: 'flex justify-center',\r\n    hasAccount: 'text-xs font-bold mt-4',\r\n    link: 'text-blue-600',\r\n    error: 'bg-red-400 text-white text-center rounded-md py-1 font-medium',\r\n    logInArea: 'flex justify-center mt-2',\r\n    logIn:'text-md font-bold text-blue-600 underline tracking-wider'\r\n}\r\n\r\nconst ForgotPassword = () => {\r\n    const emailRef = useRef();\r\n    const [error, setError] = useState('');\r\n    const [message,setMessage] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n    const { resetPassword } = useAuth();\r\n    \r\n    async function handleSubmit(e) {\r\n        e.preventDefault();\r\n        try {\r\n            setMessage(\"\")\r\n            setError(\"\");\r\n            setLoading(true);\r\n            await resetPassword(emailRef.current.value);\r\n            setMessage('Check your email for further instructions')\r\n        }\r\n        catch {\r\n            setError('Failed to Reset Password');\r\n            setLoading(false);\r\n        }        \r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={classes.body}>\r\n                <div className={classes.mainContent}>\r\n                    <div className={classes.content}>\r\n                        \r\n                        <div className={classes.card}>\r\n                            <h1 className={classes.heading}> Reset Password </h1>\r\n                            {error && <div className={classes.error}>{error}</div>} \r\n                            <form onSubmit={handleSubmit}>\r\n                                <div className=\"mb-4\">\r\n                                    <label className={classes.label}>Email </label>\r\n                                    <input type=\"email\" name=\"email\" ref={emailRef} autofocus id=\"userEmail\"  className={classes.input} placeholder=\"Your Email\" required/>\r\n                                </div>\r\n\r\n                               <div className={classes.buttonArea}>\r\n                                    <button disabled={loading} type=\"submit\" className={classes.button}>Reset Password</button>\r\n                                </div>\r\n                            </form>\r\n                            <div className={classes.logInArea}>\r\n                                <Link className={classes.logIn} to=\"/LogIn\">Log In</Link>\r\n                            </div>\r\n                        </div>\r\n                        <div className={classes.hasAccountArea}>\r\n                            <p className={classes.hasAccount}>Don't Have an Account? <Link className={classes.link} to=\"/SignUp\">Sign Up</Link> </p>\r\n                        </div> \r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n        )\r\n}\r\n\r\nexport default ForgotPassword","E:\\code\\React\\React-Tailwind-Firebase-JobPost\\src\\Pages\\JobPage.js",["78","79"],"import { React, useEffect, useState, useRef } from 'react'\r\nimport Navbar from './components/Navbar';\r\nimport ReactQuill from 'react-quill';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport AlgoliaPlaces from 'algolia-places-react';\r\nimport { RiSave2Fill, RiDeleteBin7Line } from 'react-icons/ri'\r\nimport {MdCancel} from 'react-icons/md'\r\nimport 'react-quill/dist/quill.snow.css';\r\n\r\n//Day.js\r\nvar dayjs = require('dayjs')\r\nvar relativeTime = require('dayjs/plugin/relativeTime')\r\ndayjs.extend(relativeTime)\r\n\r\n\r\nconst classes = {\r\n  body: 'bg-gray-200 w-screen flex justify-center align-middle',\r\n  card: 'bg-white w-1/2 m-8 rounded-2xl shadow-lg flex-row',\r\n  image: 'h-60 rounded-t-2xl relative',\r\n  logo:'w-16 mx-6 border-white border-4 h-16 bg-gray-300 rounded-2xl absolute inset-x-0 bottom-0  ',\r\n  heading: 'h-20  py-2',\r\n  title: 'text-3xl font-bold px-6 py-3 text-center mb-3 outline-none',\r\n  secondLine:'flex justify-between',\r\n  company: 'px-6 text-sm font-bold text-green-600 inline ',\r\n  location: 'text-sm font-bold text-green-600 inline ',\r\n  daysAgo:'text-sm font-bold text-green-600 px-6',\r\n  highlight: 'mx-6 rounded flex justify-between border-2 border-green-600 mt-12 ',\r\n  box: 'border-green-600 flex-grow p-3',\r\n  middleBox: 'border-green-600 border-r-2 flex-grow p-3',\r\n  highlightHeading: 'text-xs font-semibold text-gray-500',\r\n  highlightSubHeading:'font-bold text-sm',\r\n  details:'p-6',\r\n  detailsHeading: 'text-lg font-bold my-3 ',\r\n  detailsSubHeading: 'text-justify text-md font-medium tracking-wide',\r\n  unorderedList: 'list-disc list-inside',\r\n  apply: 'flex justify-center my-6',\r\n  button: 'bg-green-500 hover:bg-green-800 text-white font-bold py-2 px-4 rounded',\r\n  contacts: 'text-center font-bold text-medium mb-6',\r\n  background:'https://www.idealwork.com/wp-content/uploads/2017/11/2017_08_Smart-Office-Dubai_-MT7_web.jpg',\r\n  officePicture: 'w-full h-48 bg-gray-300 rounded-t-2xl',\r\n  jobId: 'absolute right-0 px-6 font-bold text-green-600',\r\n  id: 'text-gray-600',\r\n  newFeatured: 'flex flex-row-reverse',\r\n  smallTags: 'bg-green-600 text-xs text-white mx-6 my-3 rounded p-1 ring-2 ring-green-200 shadow-2xl',\r\n  saveBtn: 'bg-green-500 hover:bg-green-800 text-white font-bold rounded',\r\n  uploadFile: 'ml-5 bg-white py-2 px-3 border border-gray-300 rounded-md shadow-sm text-sm leading-4 font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500',\r\n  iconSave: 'text-green-300',\r\n  iconCancel: 'text-red-300',\r\n  icons: 'flex text-center'\r\n}\r\n\r\nconst JobPage = ({ match }) => {\r\n  const [value, setValue] = useState('')\r\n  const [editElement, setEditElement] = useState('')\r\n  const textRef = useRef()\r\n  const { update, fetchDoc, detail, uploadFile, urlLink, deleteImage} = useAuth()\r\n  const saveEditComponent = <div className={classes.icons}>  <RiSave2Fill onClick={setEditValue} className={classes.iconSave}/> <MdCancel className={classes.iconCancel} onClick={cancelEdit}/></div>\r\n  var fileEvent = ''\r\n  var now = dayjs()\r\n\r\n  useEffect(() => {\r\n    fetchDoc(match.params.docId)\r\n  }, [])\r\n  \r\n  function editOverview(inputValue,elementId) {\r\n    setValue(inputValue)\r\n    setEditElement(elementId)\r\n  }\r\n\r\n  function saveEdit() {\r\n    if (editElement === \"logo\") {\r\n      uploadFile(fileEvent)    \r\n      deleteImage(detail.logo)\r\n      update(urlLink, match.params.docId, editElement)\r\n    } else if (editElement === (\"overview\" || \"requirement\" || \"location\")) {\r\n        update(value, match.params.docId, editElement)\r\n    } else {\r\n        var currentValue = textRef.current.value\r\n        update(currentValue, match.params.docId, editElement)\r\n    }\r\n    setEditElement('')\r\n    setValue('')\r\n  }\r\n\r\n  function addFile(e) {\r\n    fileEvent = e\r\n  }\r\n\r\n  function cancelEdit() {\r\n    setEditElement('')\r\n  }\r\n\r\n  function setEditValue(elementId) {\r\n    setEditElement(elementId)\r\n    saveEdit()\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Navbar/>\r\n      <div className={classes.body}>\r\n        <div className={classes.card}>\r\n          <div className={classes.image}>\r\n            <div className={classes.officePicture} style={{backgroundImage: `url(${classes.background})`, backgroundSize: 'cover'}}> </div>\r\n              <div className={classes.logo}>\r\n                {editElement !== \"logo\" ?  <img alt=\"Logo\" src={detail.logo}onDoubleClick={() => { editOverview(detail.logo, \"logo\") }} /> :\r\n                  <> <input type=\"file\" onChange={(e) => addFile(e, detail.logo)} className={ classes.uploadFile }/>\r\n                          {saveEditComponent}\r\n                  </>\r\n                }\r\n              </div>\r\n              <div class={classes.newFeatured}>\r\n                  {now.diff(detail.time, 'week') > 1 && <div className={classes.smallTags}>New</div> } {detail.featured&& <div className={classes.smallTags}>Featured</div> } \r\n              </div>\r\n            <div className={classes.jobId}>Job Id: <span className={classes.id}>{match.params.docId}</span></div>\r\n          </div>\r\n    \r\n          <div className={classes.heading}>\r\n            {editElement !== \"title\" ? <div className={classes.title} onDoubleClick={() => { editOverview(detail.title, \"title\") }}>{detail.title}</div> :\r\n              <><input className={classes.title} type=\"text\" ref={textRef} defaultValue={detail.title} required/>\r\n                {saveEditComponent}\r\n              </>\r\n            }\r\n            <div className={classes.secondLine}>\r\n              {editElement !== \"company\" ? <div className={classes.company} onDoubleClick={() => { editOverview(detail.company, \"company\") }}>{detail.company}</div> :\r\n                <><input type=\"text\" ref={textRef} defaultValue={detail.company} />\r\n                  {saveEditComponent}\r\n                </>\r\n              }\r\n              {editElement !== \"location\" ? <div className={classes.location} onDoubleClick={() => { editOverview(detail.location, \"location\") }}>{detail.location}</div> :\r\n                <><AlgoliaPlaces className = { classes.input } placeholder = 'Write an address here' onChange = {(e) => setValue(e.suggestion.value) } onClear = {() => { setValue(\"\") } }/> \r\n                  {saveEditComponent}\r\n                </>\r\n              }\r\n              <div className={classes.daysAgo}> {dayjs(detail.time).fromNow() }</div>\r\n            </div>\r\n          </div>\r\n          <div className={classes.highlight}>\r\n            <div className={classes.middleBox}>\r\n              <div className={classes.highlightHeading}>Experience</div>\r\n              {editElement !== \"experience\" ? <div className={classes.highlightSubHeading} onDoubleClick={() => { editOverview(detail.experience, \"experience\") }}>{detail.experience}</div> :\r\n                <><input type=\"text\" ref={textRef} defaultValue={detail.experience} />\r\n                  {saveEditComponent}</>\r\n              }\r\n            </div>\r\n            <div className={classes.middleBox}>\r\n              <div className={classes.highlightHeading}>Work Level</div>\r\n              {editElement !== \"position\" ? <div className={classes.highlightSubHeading} onDoubleClick={() => { editOverview( detail.position,\"position\") }}>{detail.position}</div> :\r\n                <><input type=\"text\" ref={textRef} defaultValue={detail.position} />\r\n                  {saveEditComponent} </>\r\n              }\r\n            </div>\r\n            <div className={classes.middleBox}>\r\n              <div className={classes.highlightHeading}>Employee Type</div>\r\n              {editElement !== \"type\" ? <div className={classes.highlightSubHeading} onDoubleClick={() => { editOverview( detail.type,\"type\") }}>{detail.type}</div> :\r\n                <>\r\n                  <select ref={textRef} class=\"mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\">\r\n                    <option>Full Time</option>\r\n                    <option>Part Time</option>\r\n                    <option>Contract</option>\r\n                  </select>\r\n                  {saveEditComponent}\r\n                </>\r\n              }\r\n            </div>\r\n            <div className={classes.box}>\r\n              <div className={classes.highlightHeading}>Offer Salary</div>\r\n              {editElement !== \"salary\" ? <div className={classes.highlightSubHeading} onDoubleClick={() => { editOverview( detail.salary,\"salary\") }}>{detail.salary}</div> :\r\n                <><input type=\"text\" ref={textRef} defaultValue={detail.salary} />\r\n                  {saveEditComponent}\r\n                </>\r\n              }\r\n            </div>\r\n          </div>\r\n          <div className={classes.details}>\r\n            <div className={classes.detailsHeading}>Overview</div>\r\n            {editElement !== \"overview\" ? <div dangerouslySetInnerHTML={{ __html: detail.overview }} onDoubleClick={() => { editOverview(detail.overview, \"overview\") }} />\r\n              : <><ReactQuill theme=\"snow\" value={value} onChange={setValue} />{saveEditComponent}</>\r\n            }\r\n            <div className={classes.detailsHeading}>Requirement</div>\r\n            <div className={classes.detailsSubHeading}>\r\n              {editElement !== \"requirement\" ? <div dangerouslySetInnerHTML={{ __html: detail.requirement }} onDoubleClick={() => { editOverview(detail.requirement, \"requirement\") }} />\r\n                : <><ReactQuill theme=\"snow\" value={value} onChange={setValue} />{saveEditComponent}</>\r\n              }\r\n            </div>\r\n          </div>\r\n          <div className={classes.apply}> <button type=\"button\" className={classes.button}> Apply</button> </div>\r\n          <div className={classes.contacts}> Contact: {detail.email} </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default JobPage\r\n","E:\\code\\React\\React-Tailwind-Firebase-JobPost\\src\\contexts\\AuthContext.js",["80","81"],"import React, { useContext, useState, useEffect } from 'react'\r\nimport { useHistory } from \"react-router-dom\";\r\nimport firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/storage\"\r\nconst crypto = require('crypto');\r\n\r\nconst AuthContext = React.createContext()\r\n\r\nexport function useAuth() {\r\n    return useContext(AuthContext);\r\n}\r\n\r\nexport function AuthProvider({ children }) {\r\n\r\n\r\n\r\n\r\n    useEffect(() => fetchData(), [])\r\n    const [currentUser, setCurrentUser] = useState();\r\n    const [loading, setLoading] = useState(true);\r\n    const [isDelete, setIsDelete] = useState(false);\r\n    const [isAdd, setIsAdd] = useState(false);\r\n    const [urlLink, setUrlLink] = useState()\r\n    const [detail, setDetail] = useState('')\r\n    const storageRef = firebase.storage().ref()\r\n    const [fileRef, setFileRef] = useState('')\r\n\r\n\r\n    const jobsRef = firebase.firestore().collection('jobs');\r\n    const [jobs, setJobs] = useState([])\r\n\r\n    async function fetchData(path) {\r\n        if (path === \"/DashBoard\") {\r\n            const snapshot = await jobsRef.where('email', '==', currentUser.email).get();\r\n            const data = []\r\n            snapshot.forEach(doc => {\r\n                var temp = doc.data()\r\n                temp.docId = doc.id\r\n                data.push(temp)\r\n            });\r\n            setJobs(data)\r\n        } else {\r\n            const snapshot = await jobsRef.get()\r\n            const data = []\r\n            snapshot.forEach(doc => {\r\n                var temp = doc.data()\r\n                temp.docId = doc.id\r\n                data.push(temp)\r\n            });\r\n            setJobs(data)\r\n        }\r\n    }\r\n\r\n    function AddJob() {\r\n        setIsAdd(!isAdd)\r\n    }\r\n\r\n    function jobDetails(docId) {\r\n        jobsRef.doc(docId).get().then((doc) => {\r\n            if (doc.exists) {\r\n                const details = doc.data();\r\n\r\n                return details\r\n            } else {\r\n                // doc.data() will be undefined in this case\r\n                console.log(\"No such document!\");\r\n            }\r\n        })\r\n    }\r\n\r\n    function logIn(email, password) {\r\n        return firebase.auth().signInWithEmailAndPassword(email, password)\r\n\r\n\r\n\r\n    }\r\n\r\n    function signUp(email, password) {\r\n        return firebase.auth().createUserWithEmailAndPassword(email, password);\r\n    }\r\n\r\n    function Delete() {\r\n        setIsDelete(!isDelete)\r\n    }\r\n\r\n    function logOut() {\r\n        setIsAdd(false)\r\n        return firebase.auth().signOut();\r\n    }\r\n\r\n    function resetPassword(email) {\r\n        return firebase.auth().sendPasswordResetEmail(email);\r\n    }\r\n\r\n    async function deleteDoc(docId) {\r\n        await jobsRef.doc(docId).delete();\r\n\r\n    }\r\n\r\n    async function update(value, docId, field) {\r\n        const updateRef = jobsRef.doc(docId);\r\n        console.log(value, docId, field)\r\n        if (field === \"overview\") {\r\n            await updateRef.update({ overview: value });\r\n        } else if (field === \"requirement\") {\r\n            await updateRef.update({ requirement: value });\r\n        } else if (field === \"experience\") {\r\n            await updateRef.update({ experience: value });\r\n        } else if (field === \"position\") {\r\n            await updateRef.update({ position: value });\r\n        } else if (field === \"type\") {\r\n            await updateRef.update({ type: value });\r\n        } else if (field === \"salary\") {\r\n            await updateRef.update({ salary: value });\r\n        } else if (field === \"company\") {\r\n            await updateRef.update({ company: value });\r\n        } else if (field === \"title\") {\r\n            await updateRef.update({ title: value });\r\n        } else if (field === \"location\") {\r\n            await updateRef.update({ location: value });\r\n        } else if (field === \"logo\") {\r\n            await updateRef.update({ logo: value });\r\n        }\r\n        fetchDoc(docId)\r\n\r\n    }\r\n\r\n\r\n    async function fetchDoc(docId) {\r\n        await jobsRef.doc(docId).get().then((doc) => {\r\n            doc.exists ? setDetail(doc.data()) :\r\n                console.log(\"No such document!\");\r\n        })\r\n    }\r\n\r\n    async function addDoc(data) {\r\n        await jobsRef.doc().set(data);\r\n        fetchData()\r\n\r\n        setIsAdd(!isAdd)\r\n    }\r\n\r\n    function uploadFile(e) {\r\n\r\n        const fileHash = crypto.createHash('sha1').update(e.target.value).digest('hex');\r\n        const file = e.target.files[0]\r\n        const fileReference = storageRef.child(currentUser.email + \"/\" + fileHash)\r\n        fileReference.put(file).then(() => (\r\n            fileReference.getDownloadURL()\r\n            .then((url) => {\r\n                setUrlLink(url)\r\n                setFileRef(fileHash)\r\n            })\r\n            .catch((error) => {\r\n                console.log(error)\r\n            })\r\n        ))\r\n\r\n    }\r\n    async function deleteImage(prevURL) {\r\n        console.log(prevURL)\r\n        var desertRef = storageRef.child(currentUser.email + \"/\" + fileRef);\r\n\r\n        // Delete the file\r\n        desertRef.delete().then(() => {\r\n            console.log(\"Image deleted\")\r\n        }).catch((error) => {\r\n            // Uh-oh, an error occurred!\r\n        });\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        const unsubscribe = firebase.auth().onAuthStateChanged(user => {\r\n            setCurrentUser(user);\r\n            setLoading(false);\r\n        })\r\n        return unsubscribe;\r\n    }, [])\r\n\r\n    const value = {\r\n        currentUser,\r\n        signUp,\r\n        logIn,\r\n        logOut,\r\n        resetPassword,\r\n        addDoc,\r\n        jobDetails,\r\n        deleteDoc,\r\n        fetchData,\r\n        jobs,\r\n        isDelete,\r\n        Delete,\r\n        isAdd,\r\n        AddJob,\r\n        uploadFile,\r\n        urlLink,\r\n        update,\r\n        detail,\r\n        fetchDoc,\r\n        deleteImage,\r\n        fileRef\r\n    }\r\n\r\n    return ( <\r\n        AuthContext.Provider value = { value } > {!loading && children } <\r\n        /AuthContext.Provider>\r\n    )\r\n}","E:\\code\\React\\React-Tailwind-Firebase-JobPost\\src\\Pages\\UI\\TextInput.js",["82","83"],"import React from 'react'\r\nimport { Formik, Form, useField } from 'formik';\r\n\r\nconst classes = {\r\n    \r\n    label: 'font-bold text-grey-darker block mb-2',\r\n    input: 'block w-full bg-white border border-grey-light hover:border-green-300 px-2 py-2 rounded shadow',\r\n    error: 'text-red-600 my-1 text-center text-xs  font-medium'\r\n}\r\n\r\nconst TextInput = ({ label, ...props }) => {\r\n const [field, meta] = useField(props)\r\n return (\r\n  <>\r\n    <label className={classes.label} htmlFor={props.id || props.name}>{label}</label>\r\n    <input className={classes.input} {...field} {...props} />\r\n    {meta.touched && meta.error ? (\r\n        <div className={classes.error}>{meta.error}</div>\r\n    ) : null}\r\n  </>\r\n )\r\n}\r\n\r\nexport default TextInput\r\n","E:\\code\\React\\React-Tailwind-Firebase-JobPost\\src\\Pages\\UI\\Checkbox.js",[],"E:\\code\\React\\React-Tailwind-Firebase-JobPost\\src\\Pages\\components\\Navbar.js",[],"E:\\code\\React\\React-Tailwind-Firebase-JobPost\\src\\Pages\\Modal.jsx",[],"E:\\code\\React\\React-Tailwind-Firebase-JobPost\\src\\Pages\\ModalAdd.jsx",["84","85"],"import { React, useState, useRef, useEffect } from 'react'\r\nimport \"@pathofdev/react-tag-input/build/index.css\";\r\nimport ReactTagInput from \"@pathofdev/react-tag-input\";\r\nimport AlgoliaPlaces from 'algolia-places-react';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport ReactQuill from 'react-quill';\r\nimport 'react-quill/dist/quill.snow.css';\r\n\r\n\r\nconst classes = {\r\n input: 'block w-full bg-white border border-grey-light hover:border-green-300 px-2 py-2 w-12 rounded shadow',\r\n    \r\n}\r\nconst ModalAdd = () => {\r\n    const { addDoc, currentUser, uploadFile, urlLink, fetchData, fileRef, AddJob } = useAuth();\r\n    const [tags, setTags] = useState([])\r\n    const [location, setLocation] = useState('')\r\n    const companyRef = useRef()\r\n    const titleRef = useRef()\r\n    const positionRef = useRef()\r\n    const typeRef = useRef()\r\n   const [requirementValue, setRequirementValue] = useState('')\r\n    const salaryRef = useRef()\r\n    const [error, setError] = useState('');\r\n    const [overviewValue, setOverviewValue] = useState('');\r\n\r\n    \r\n\r\n  function addFile(e) {\r\n     \r\n    uploadFile(e)\r\n }\r\n function handleSubmit(e) {\r\n  e.preventDefault()\r\n        const title = titleRef.current.value\r\n        const company = companyRef.current.value\r\n        const position = positionRef.current.value\r\n        const type = typeRef.current.value\r\n        if (location && tags[0]) {\r\n            const data = {\r\n                title: title,\r\n                company: company,\r\n                logo: urlLink,\r\n                position: position,\r\n                location: location,\r\n                overview: overviewValue,\r\n                requirement: requirementValue,\r\n                tags: tags,\r\n                time: new Date().toLocaleString(),\r\n                email: currentUser.email,\r\n              type: type,\r\n                fileRef: fileRef\r\n            }\r\n         addDoc(data);\r\n         fetchData()\r\n        } else {\r\n            setError('Fill Up all the fields!')\r\n        }\r\n }\r\n\r\n  function handleCancel() {\r\n  AddJob()\r\n  }\r\n  \r\n return (\r\n  <>\r\n    <form>\r\n        <div class=\"shadow overflow-hidden sm:rounded-md\">\r\n       <div class=\"bg-white sm:p-6\">\r\n        \r\n              <div class=\"col-span-6 sm:col-span-4 mb-5  \">\r\n                <label for=\"title\" class=\"block text-sm font-medium \">Job Title</label>\r\n                <input type = \"text\"\r\n                            name = \"title\"\r\n                           ref = { titleRef }\r\n                           className = { classes.input }\r\n                            placeholder = \"Job Title\"\r\n                            required />\r\n        </div>\r\n        <div>\r\n              <label class=\"block text-sm font-medium text-gray-700\">\r\n               Company Logo\r\n              </label>\r\n              <div class=\"mt-2 flex items-center\">\r\n                <span class=\"inline-block h-12 w-12  overflow-hidden bg-gray-100\">\r\n                \r\n                </span>\r\n             \r\n        <input type=\"file\" onChange={addFile} class=\"ml-5 bg-white py-2 px-3 border border-gray-300 rounded-md shadow-sm text-sm leading-4 font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"/>\r\n        \r\n              </div>\r\n            </div>\r\n\r\n        \r\n            <div class=\"grid grid-cols-6 gap-6\">\r\n              <div class=\"col-span-6 sm:col-span-3\">\r\n                <label for=\"company\" class=\"block text-sm font-medium text-gray-700\">Company</label>\r\n                <input type = \"text\"\r\n                       name = \"company\"\r\n                       ref = { companyRef }\r\n                       className = { classes.input }\r\n                       placeholder = \"Company Name\"\r\n                       required />\r\n              </div>\r\n\r\n              <div class=\"col-span-6 sm:col-span-3\">\r\n                <label for=\"Position\" class=\"block text-sm font-medium text-gray-700\">Position</label>\r\n          <input type = \"text\"\r\n                 name = \"position\"\r\n                 ref = { positionRef }\r\n                 className = { classes.input }\r\n                 placeholder = \"Position\"\r\n                 required />     \r\n         </div>\r\n\r\n         <div class=\"col-span-6 sm:col-span-6\">\r\n           <label for=\"Location\" class=\"block text-sm font-medium text-gray-700\">Location</label>\r\n           <AlgoliaPlaces className = { classes.input } placeholder = 'Write an address here' onChange = {(e) => setLocation(e.suggestion.value) } onClear = {() => { setLocation(\"\") } }/> \r\n         </div>\r\n\r\n              <div class=\"col-span-6 sm:col-span-3\">\r\n                <label for=\"job_type\" class=\"block text-sm font-medium text-gray-700\">Job Type</label>\r\n                <select id=\"job_type\" ref={typeRef} name=\"type\" autocomplete=\"job_type\" class=\"mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\">\r\n                  <option>Full Time</option>\r\n                  <option>Part Time</option>\r\n                  <option>Contract</option>\r\n                </select>\r\n         </div>\r\n          <div class=\"col-span-6 sm:col-span-3\">\r\n                <label for=\"Salary\" class=\"block text-sm font-medium text-gray-700\">Salary</label>\r\n          <input type = \"text\"\r\n                 name = \"salary\"\r\n                 ref = { salaryRef }\r\n                 className = { classes.input }\r\n                 placeholder = \"Salary per Year\"\r\n                 required />     \r\n         </div>\r\n\r\n            </div>\r\n              <div class=\"sm:col-span-4 my-5  \">\r\n                <label for=\"title\" class=\"block text-sm font-medium \">OverView</label>\r\n               <ReactQuill theme=\"snow\" value={overviewValue} onChange={setOverviewValue}/>\r\n\r\n      </div>\r\n      <div class=\"sm:col-span-4 mb-5  \">\r\n                <label for=\"title\" class=\"block text-sm font-medium \">Requirement</label>\r\n             <ReactQuill theme=\"snow\" value={requirementValue} onChange={setRequirementValue}/>\r\n\r\n       </div>\r\n       \r\n\r\n       <div class=\"col-span-6 sm:col-span-6 lg:col-span-6\" >\r\n        <div class=\"w-80\">\r\n                <div className = { classes.inputField } >\r\n                  <label className={classes.label} > Tags </label>\r\n                  <ReactTagInput tags = { tags } onChange = {(newTags) => setTags(newTags) } />\r\n       </div>\r\n       </div>\r\n            </div>\r\n         \r\n          <div class=\" py-8  flex justify-between \">\r\n            <button onClick={handleCancel} type=\"submit\" class=\"inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-gray-600 hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\">\r\n               Cancel\r\n            </button>\r\n             <button onClick={handleSubmit} type=\"submit\" class=\"inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\">\r\n              Save\r\n            </button>\r\n          </div>\r\n     </div>\r\n     </div>\r\n      </form>\r\n  </>\r\n )\r\n}\r\n\r\nexport default ModalAdd\r\n",{"ruleId":"86","severity":1,"message":"87","line":2,"column":8,"nodeType":"88","messageId":"89","endLine":2,"endColumn":10},{"ruleId":"86","severity":1,"message":"90","line":1,"column":27,"nodeType":"88","messageId":"89","endLine":1,"endColumn":33},{"ruleId":"86","severity":1,"message":"91","line":2,"column":24,"nodeType":"88","messageId":"89","endLine":2,"endColumn":32},{"ruleId":"86","severity":1,"message":"92","line":29,"column":21,"nodeType":"88","messageId":"89","endLine":29,"endColumn":32},{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","replacedBy":"96"},{"ruleId":"86","severity":1,"message":"97","line":37,"column":10,"nodeType":"88","messageId":"89","endLine":37,"endColumn":12},{"ruleId":"98","severity":1,"message":"99","line":46,"column":5,"nodeType":"100","endLine":46,"endColumn":23,"suggestions":"101"},{"ruleId":"86","severity":1,"message":"90","line":1,"column":27,"nodeType":"88","messageId":"89","endLine":1,"endColumn":33},{"ruleId":"86","severity":1,"message":"91","line":2,"column":24,"nodeType":"88","messageId":"89","endLine":2,"endColumn":32},{"ruleId":"86","severity":1,"message":"102","line":28,"column":12,"nodeType":"88","messageId":"89","endLine":28,"endColumn":19},{"ruleId":"86","severity":1,"message":"103","line":6,"column":23,"nodeType":"88","messageId":"89","endLine":6,"endColumn":39},{"ruleId":"98","severity":1,"message":"104","line":63,"column":6,"nodeType":"100","endLine":63,"endColumn":8,"suggestions":"105"},{"ruleId":"86","severity":1,"message":"106","line":2,"column":10,"nodeType":"88","messageId":"89","endLine":2,"endColumn":20},{"ruleId":"98","severity":1,"message":"99","line":20,"column":34,"nodeType":"100","endLine":20,"endColumn":36,"suggestions":"107"},{"ruleId":"86","severity":1,"message":"108","line":2,"column":10,"nodeType":"88","messageId":"89","endLine":2,"endColumn":16},{"ruleId":"86","severity":1,"message":"109","line":2,"column":18,"nodeType":"88","messageId":"89","endLine":2,"endColumn":22},{"ruleId":"86","severity":1,"message":"110","line":1,"column":35,"nodeType":"88","messageId":"89","endLine":1,"endColumn":44},{"ruleId":"86","severity":1,"message":"111","line":24,"column":12,"nodeType":"88","messageId":"89","endLine":24,"endColumn":17},"no-unused-vars","'db' is defined but never used.","Identifier","unusedVar","'useRef' is defined but never used.","'useField' is defined but never used.","'currentUser' is assigned a value but never used.","no-native-reassign",["112"],"no-negated-in-lhs",["113"],"'id' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","ArrayExpression",["114"],"'message' is assigned a value but never used.","'RiDeleteBin7Line' is defined but never used.","React Hook useEffect has missing dependencies: 'fetchDoc' and 'match.params.docId'. Either include them or remove the dependency array.",["115"],"'useHistory' is defined but never used.",["116"],"'Formik' is defined but never used.","'Form' is defined but never used.","'useEffect' is defined but never used.","'error' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"117","fix":"118"},{"desc":"119","fix":"120"},{"desc":"121","fix":"122"},"Update the dependencies array to be: [fetchData, props.match.path]",{"range":"123","text":"124"},"Update the dependencies array to be: [fetchDoc, match.params.docId]",{"range":"125","text":"126"},"Update the dependencies array to be: [fetchData]",{"range":"127","text":"128"},[1784,1802],"[fetchData, props.match.path]",[3101,3103],"[fetchDoc, match.params.docId]",[472,474],"[fetchData]"]